[tool.poetry]
name = "analysis"
version = "0.1.0"
description = ""
authors = ["Marc GÃ¤hwiler <marc@marcg.ch>"]

#readme = "README.rst"
packages = [
    { include = "app" }
]

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.110.0"
pydantic = {extras = ["dotenv"], version = "^2.7.1"}
toml = "^0.10.2"
tortoise-orm = {extras = ["asyncpg"], version = "^0.20.1"}
aerich = "^0.7.2"
aiohttp = "^3.9.5"
aiofiles = "^23.2.1"
uvicorn = {extras = ["standard"], version = "^0.29.0"}
mutagen = "^1.47.0"
# goifer = "^0.0.5"
#goifer = { git = "https://github.com/metaodi/goifer.git", branch = "paris-api-update" }
#xsdata-pydantic = {extras = ["cli"], version = "^22.10"}
xsdata-pydantic = {extras = ["cli"], git = "https://github.com/tefra/xsdata-pydantic.git", branch = "main"}
xmltodict = "^0.13.0"
httpx = {extras = ["http2"], version = "^0.27.0"}
xsdata = {extras = ["lxml"], version = "^24.4"}
pydantic-xml = {extras = ["lxml"], version = "^2.9.2"}

[tool.poetry.dev-dependencies]
tortoise-orm = {extras = ["aiosqlite"], version = "^0.20.1"}
pytest = "^8.1.2"
pytest-asyncio = "^0.23.6"
pytest-env = "^1.1.3"
pytest-cov = "^5.0.0"
ruff = "^0.4.2"
mypy = "^1.10.0"

[build-system]
requires = ["poetry>=1.8.2"]
build-backend = "poetry.masonry.api"

[tool.aerich]
tortoise_orm = "app.core.config.DATABASE_CONFIG"
location = "./migrations"
src_folder = "./."

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
#extend-exclude = [
#    '^/app/sources/picturepark/client',  # PicturePark API client (generated)
#    '\.git',
#    '\.mypy_cache',
#    '\.pytest_cache',
#    '\.tox',
#    '\.?venv',
#]
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.tox
  | \.?venv
)/
'''

[tool.isort]
profile = "black"

[tool.mypy]
python_version = '3.12'
# plugins = ''
ignore_missing_imports = 'True'
disallow_untyped_defs = 'True'
warn_unused_configs = true
strict = true

# Files to exclude
exclude = [
    'test_(.+)\.py$',
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra --pyargs"
testpaths = [
    "tests",
]

[tool.pytest_env]
POSTGRES_USER = "foobar"
POSTGRES_PASSWORD = "foobar"

[tool.ruff]
line-length = 88
target-version = "py312"
indent-width = 4
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".idea",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# select = ["D", "E4", "E7", "E9", "F", "I", "N", "Q", "W", "UP"]
select = ["ALL"]
ignore = [
    "ANN401", # Allow Any as parameter type
    "B008", # Allow function calls as defaults for function arguments (FastAPI)
    "D100", "D104", # Public module & package docstrings
    "D212", # Start multiline docstrings on second line
    "D203", # No blank line before docstring for classes
    "PLW1508", # Allow env var defaults to be non-strings
    "E501", # Line too long
    "FIX002", # Allow TODOS
    "PLR2004", # Allow comparison with magic value TODO(mg): Remove
    "UP040", # Type definitions using type not yet fully supported
    "S104", # Allow binding to all network interfaces
    "S311", # Allow usage of pseudo-random number generators
    "TD003", # TODOs don't need issue link
    "TRY003", "EM101", # Allow throwing exceptions with messages
    "COM812", "ISC001", # Conflicts with ruff formater
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D103", # Allow missing docstrings in tests
    "DTZ001", # Allow timezone naive datetime
    "S101", # Allow use of assert (pytest)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
